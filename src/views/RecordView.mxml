<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		exitState="ampView_exitStateHandler(event)" title="Recording Sesh">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup width="100%" height="694" horizontalAlign="center" verticalAlign="top">
		<s:Spacer width="10" height="10"/>
		<s:Label fontFamily="_typewriter" fontSize="18" fontStyle="normal" fontWeight="bold"
				 text="Welcome to your recording session..." textAlign="left" textDecoration="none"
				 verticalAlign="top"/>
		<s:Spacer width="10" height="10"/>
		<s:Button id="recButton" x="109" y="40" width="102" height="102" label="Start Rec"
				  click="startJamming()" enabled="true" icon="graphics/RecOff_btn.png"/>
		<s:Spacer width="10" height="10"/>
		<s:Label x="7" width="466" fontFamily="_typewriter" fontSize="18" fontStyle="normal"
				 fontWeight="bold" text="Review your recordings:" textAlign="left"
				 textDecoration="none" verticalAlign="top"/>
		
		<!--MP3 Player-->
		<s:TextArea id="songInfo" width="100%" height="246" editable="false"/>       
		<s:HGroup width="100%">         
			<s:Button label="Browse" id="browse" click="browse_clickHandler(event)"/>
			<s:Label id="playInfo" width="100%" height="40" verticalAlign="bottom"/>                
		</s:HGroup>
		<s:HGroup>          
			<s:Button label="Pause" id="pauseButton" 
					  click="pauseButton_clickHandler(event)" 
					  enabled="{playing}"/>         
			<s:Button label="Start Over" id="playButton" 
					  click="playButton_clickHandler(event)" 
					  enabled="{playResumeButtonState(readyToPlay,playing)}"/>      
			<s:Button label="Resume" id="resumeButton" 
					  click="resumeButton_clickHandler(event)" 
					  enabled="{playResumeButtonState(readyToPlay,playing)}"/>                  
		</s:HGroup>
		<s:Spacer width="50" height="16"/>
		<s:Button label="Back" click="navigator.popView()" fontWeight="bold" styleName="back"/>
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			private var mic:Microphone = Microphone.getMicrophone(-1);
			private var recordedBytes:ByteArray;
			private var s:Sound;
			
			private var recording:Boolean = false;
			
			protected function startJamming():void {
				trace("Mics: " + Microphone.names);
				if(!recording) {
					togglePlayButton();
					recButton.setStyle("icon", "graphics/Rec_btn.png");
					mic.rate = 44;
					mic.setSilenceLevel(0, 4000);
					mic.addEventListener(SampleDataEvent.SAMPLE_DATA, getMicAudio);
					recordedBytes = new ByteArray();
				}
				else if(recording) {
					SoundMixer.useSpeakerphoneForVoice = true;
					SoundMixer.audioPlaybackMode = AudioPlaybackMode.MEDIA;
					mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, getMicAudio);
					recButton.setStyle("icon", "graphics/RecOff_btn.png");
					togglePlayButton();
				}
			}
			
			protected function togglePlayButton():void {
				recording = !recording;
				playButton.enabled = !playButton.enabled;
			}
			
			protected function getMicAudio(event:SampleDataEvent):void
			{
				var sample:Number = event.data.readFloat();
				recordedBytes.writeBytes(event.data);
			}
			
			protected function playSound():void
			{
				if (recordedBytes.length > 0)
				{
					playButton.setStyle("icon", "graphics/Play_btn.png");	
					recordedBytes.position = 0;
					s = new Sound();
					s.addEventListener(SampleDataEvent.SAMPLE_DATA, playRecorded);
					var channel:SoundChannel;
					channel = s.play();
					channel.addEventListener(Event.SOUND_COMPLETE, stopPlayback);
				}
			}
			
			private function stopPlayback(event:Event):void
			{
				playButton.setStyle("icon", "graphics/PlayOff_btn.png");	 
			}
			
			private function playRecorded(e:SampleDataEvent): void
			{
				if (!recordedBytes.bytesAvailable > 0)
					return;
				var length:int = 8192;
				for (var i:int = 0; i < length; i++)
				{
					var sample:Number = 0;
					if (recordedBytes.bytesAvailable > 0) sample = recordedBytes.readFloat();
					e.data.writeFloat(sample);
					e.data.writeFloat(sample);
				}
			}
			
			protected function stopJamming():void {
				SoundMixer.stopAll();
			}
			
			protected function ampView_exitStateHandler(event:FlexEvent):void
			{
				stopJamming();
				event.stopImmediatePropagation();
			}
			
		
		/*
		 * ***Mobile MP3 Player Section***
		 * "Creating a mobile mp3 player"
		 * By Rich Tretola | July 6, 2011
		 * http://blog.everythingflex.com/2011/07/06/creating-a-mobile-mp3-player/
		 */
			private var sound:Sound;
			private var songLength:String;
			private var soundChannel:SoundChannel;
			[Bindable]
			private var readyToPlay:Boolean = false;
			[Bindable]
			private var playing:Boolean = false;
			private var file:File;
			private var filter:FileFilter = new FileFilter("Music", "*.mp3;");
			
			protected function browse_clickHandler(event:MouseEvent):void {
				file = new File();
				file.addEventListener(Event.SELECT, onFileSelect);
				file.browseForOpen("Open",[filter]);
			}
			
			private function onFileSelect(event:Event):void{
				file.removeEventListener(Event.SELECT, onFileSelect);
				file = File(event.currentTarget);
				sound = new Sound();                
				sound.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
				sound.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				sound.addEventListener(Event.ID3,showID3);
				sound.addEventListener(Event.COMPLETE, loadComplete);
				sound.load(new URLRequest(file.url));               
			}
			
			private function errorHandler(event:IOErrorEvent):void {
				songInfo.text = "Song not loaded";
			}
			
			private function progressHandler(event:ProgressEvent):void {
				var loadTime:Number = event.bytesLoaded / event.bytesTotal;
				var LoadPercent:uint = Math.round(100 * loadTime);
				
				songInfo.text = "Song size: " + event.bytesTotal + " bytes\n" 
					+ "Loading " + LoadPercent + "%.";
			}
			
			private function loadComplete(event:Event):void {                   
				pauseButton_clickHandler(null);
				var minutes:Number = Math.floor(sound.length / 1000 / 60);
				var seconds:Number = Math.floor(sound.length / 1000) % 60;
				songLength = minutes + ":" + seconds;
				readyToPlay = true;
				play();
			}
			
			private function play(pos:Number=0):void{
				playing = true;
				soundChannel = sound.play(pos);
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
			}
			
			
			private function showID3(event:Event):void {                
				songInfo.text = "Album: " + sound.id3.album + "\n" + 
					"Artist: " + sound.id3.artist + "\n" +
					"Genre: " + sound.id3.genre + "\n" +
					"Songname: " + sound.id3.songName + "\n" +
					"Track: " + sound.id3.track + "\n" +
					"Year: " + sound.id3.year;
			}
			
			protected function playButton_clickHandler(event:MouseEvent):void {
				play();
			}
			
			protected function resumeButton_clickHandler(event:MouseEvent):void {
				play(soundChannel.position);
			}
			
			protected function pauseButton_clickHandler(event:MouseEvent):void {
				playing = false;
				SoundMixer.stopAll();   
				playInfo.text = "Stopped";
				removeEventListener(Event.ENTER_FRAME, onEnterFrame);
			}
			
			protected function onEnterFrame(e:Event):void{              
				var minutes:Number = Math.floor(soundChannel.position / 1000 / 60);
				var seconds:Number = Math.floor(soundChannel.position / 1000) % 60;
				playInfo.text = "playing "+ minutes + ':' + seconds + " of " + songLength;
			}
			
			private function playResumeButtonState(readyToPlay:Boolean, playing:Boolean):Boolean{
				if(readyToPlay && !playing){
					return true;
				}
				return false;
			}
			
		]]>
	</fx:Script>
</s:View>
